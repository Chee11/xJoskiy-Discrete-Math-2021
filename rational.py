def INT_Q_B(Q):
    numerator = Q[0]
    denominator = Q[1]
    return not MOD_NN_N([numerator[1], numerator[2]], denominator)
# Гурьянов Савелий
# Функция возвращает отрицание результата остатка от деления числителя, преобразованного к натуральному числу,
# на натуральный знаменатель, если остаток равен нулю, то дробь преобразуется к натуральному числу, иначе не преобразуется и вернётся 0


def RED_Q_Q(Q):
    Q[0] = DIV_ZZ_Z(Q[0], [0] + GCF_NN_N(ABS_Z_N(Q[0]), Q[1]))
    Q[1] = DIV_ZZ_Z([0] + Q[1], [0] + GCF_NN_N(ABS_Z_N(Q[0]), Q[1]))[1:]
    return [Q[0], Q[1]]
# Гурьянов Савелий
# Числитель и знаменатель делятся на НОД знаменателя и числителя(числитель преобразуется к натуральному числу при помощи
# функции ABS_Z_N)


def MUL_QQ_Q(rational1,rational2): # на вход функция получает 2 рациональных числа
    # Семёнов Михаил
    # Умножение дробей
    count1 = 0
    count2 = 0
    for i in range(len(rational1)): # в цикле проходим по всем элеиентам списка(первого рационального числа)
        if rational1[i] == '/': # символ-разделитель дроби на числитель и знаменатель
            count1 = i # номер элемента,который "делит" дробь на числитель и знаменатель 
            i = len(rational1) # выход из цикла
    if count1 == 0: # условие целого числа
        chisl1 = rational1[:] # числитель первого числа
        znam1 = '1' # знаменатель первого числа
    else: # иначе (число дробное)
        chisl1 = rational1[0:count1] # числитель первого числа
        znam1 = rational1[count1 + 1:] # знаменатель первого числа
    i = 0
    for i in range(len(rational2)): # в цикле проходим по всем элеиентам списка(второго рационального числа)
        if rational2[i] == '/': # символ-разделитель дроби на числитель и знаменатель
            count2 = i # номер элемента,который "делит" дробь на числитель и знаменатель 
            i = len(rational2) # выход из цикла
    if count2 == 0: # условие целого числа
        chisl2 = rational2[:] # числитель второго числа
        znam2 = '1' # знаменатель второго числа
    else: # иначе (число дробное)
        chisl2 = rational2[0:count2] # числитель второго числа
        znam2 = rational2[count2 + 1:] # знаменатель второго числа
        
    chisl_res = MUL_ZZ_Z(chisl1,chisl2) # умножение числителя первой дроби на числитель второй дроби
    
    znam_res = MUL_ZZ_Z(znam1,znam2) # умножение знаменателя первой дроби на знаменатель второй дроби
    
    rational = chisl_res + '/' + znam_res # записываем дробь в список
    
    rational_itog = RED_Q_Q(rational) # сокращение дроби
    
    return rational_itog
